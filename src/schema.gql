# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Category {
  id: ID!
  name: String!
  posts: [Post!]
}

type Comment {
  id: ID!
  content: String!
  authorId: Int!
  postId: Int!
  author: User!
  post: Post!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""게시글을 나타내는 객체"""
type Post {
  """게시글의 고유 식별자"""
  id: ID!

  """게시글의 제목"""
  title: String!

  """게시글의 내용"""
  content: String!

  """게시글 작성자의 ID"""
  authorId: Int!
  author: User!
  comments: [Comment!]!

  """게시글의 카테고리 ID (없을 수 있음)"""
  categoryId: Int

  """게시글의 카테고리 정보 (없을 수 있음)"""
  category: Category

  """게시글이 생성된 날짜 및 시간"""
  createdAt: DateTime!

  """게시글이 마지막으로 업데이트된 날짜 및 시간"""
  updatedAt: DateTime!
  categories: Category
}

type User {
  id: Int!
  email: String!
  name: String
  role: Role!
  posts: [Post!]!
  comments: [Comment!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Role {
  id: ID!
  name: String!
  users: [User!]!
}

type AuthPayload {
  user: User!
  token: String!
}

type PaginationInfo {
  page: Int!
  pageSize: Int!
  totalItems: Int!
}

type PostPaginationResult {
  posts: [Post!]!
  pagination: PaginationInfo!
}

type Query {
  viewUserProfile: User

  """포스트 목록을 페이징하여 반환합니다."""
  listPosts(pagination: PaginationInput!): PostPaginationResult!

  """특정 ID의 포스트를 조회합니다."""
  viewPost(id: Int!): Post!

  """주어진 검색 조건에 따라 포스트를 검색합니다."""
  searchPosts(searchCriteria: PostSearchInput!, pagination: PaginationInput!): PostPaginationResult!

  """특정 카테고리에 속하는 포스트를 필터링합니다."""
  filterPostsByCategory(categoryId: Int!): [Post!]!
  listComments(postId: Int!): [Comment!]!
}

input PaginationInput {
  page: Int! = 1
  pageSize: Int! = 10
}

input PostSearchInput {
  title: String
  content: String
  authorId: Int
}

type Mutation {
  registerUser(createUserInput: CreateUserInput!): User!
  loginUser(credentials: LoginInput!): AuthPayload!
  updateUserProfile(updateData: UpdateUserInput!): User!
  deleteUser(id: Int!): User!

  """새로운 포스트를 생성합니다."""
  createPost(createPostInput: CreatePostInput!): Post!

  """기존 포스트를 업데이트합니다."""
  updatePost(postId: Int!, updateData: UpdatePostInput!): Post!

  """특정 포스트를 삭제합니다."""
  deletePost(postId: Int!): Post!

  """포스트에 카테고리를 할당합니다."""
  assignCategoryToPost(postId: Int!, categoryId: Int!): Post!
  addComment(createCommentInput: CreateCommentInput!): Comment!
  updateComment(updateCommentInput: UpdateCommentInput!): Comment!
  deleteComment(commentId: Int!): Comment!
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
}

input CreateUserInput {
  email: String!
  password: String!
  name: String
  roleId: Int
}

input LoginInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  id: Int!
  email: String
  name: String
}

input CreatePostInput {
  title: String!
  content: String!
  tags: [String!]
}

input UpdatePostInput {
  title: String
  content: String
}

input CreateCommentInput {
  postId: Int!
  content: String!
}

input UpdateCommentInput {
  id: Int!
  content: String!
}

input CreateCategoryInput {
  name: String!
}

type Subscription {
  onCommentAdded(postId: Int!): Comment!
}