# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Category {
  id: ID!
  name: String!
  posts: [Post!]
}

type Comment {
  id: Int!
  content: String!
  authorId: Int!
  author: User!
  postId: Int!
  post: Post!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Post {
  id: ID!
  title: String!
  content: String!
  authorId: Int!
  author: User!
  comments: [Comment!]!
  categoryId: Int
  categories: Category
  createdAt: DateTime!
  updatedAt: DateTime!
}

type User {
  id: Int!
  email: String!
  name: String
  role: Role!
  posts: [Post!]!
  comments: [Comment!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Role {
  id: Int!
  name: String!
  users: [User]
}

type AuthPayload {
  user: User!
  token: String!
}

type PaginationInfo {
  page: Int!
  pageSize: Int!
  totalItems: Int!
}

type PostPaginationResult {
  posts: [Post!]!
  pagination: PaginationInfo!
}

type Query {
  viewUserProfile: User
  listPosts(pagination: PaginationInput!): PostPaginationResult!
  viewPost(id: Int!): Post!
  searchPosts(searchCriteria: PostSearchInput!, pagination: PaginationInput!): PostPaginationResult!
  filterPostsByCategory(categoryId: Int!): [Post!]!
  listComments(postId: Int!): [Comment!]!
}

input PaginationInput {
  page: Int! = 1
  pageSize: Int! = 10
}

input PostSearchInput {
  title: String
  content: String
  authorId: Int
}

type Mutation {
  registerUser(createUserInput: CreateUserInput!): User!
  loginUser(credentials: LoginInput!): AuthPayload!
  updateUserProfile(updateData: UpdateUserInput!): User!
  deleteUser(id: Int!): User!
  createPost(createPostInput: CreatePostInput!): Post!
  updatePost(postId: Int!, updateData: UpdatePostInput!): Post!
  deletePost(postId: Int!): Post!
  assignCategoryToPost(postId: Int!, categoryId: Int!): Post!
  addComment(createCommentInput: CreateCommentInput!): Comment!
  updateComment(updateCommentInput: UpdateCommentInput!): Comment!
  deleteComment(commentId: Int!): Comment!
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
}

input CreateUserInput {
  email: String!
  password: String!
  name: String
  roleId: Int
}

input LoginInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  id: Int!
  email: String
  name: String
}

input CreatePostInput {
  title: String!
  content: String!
  tags: [String!]
}

input UpdatePostInput {
  title: String
  content: String
}

input CreateCommentInput {
  postId: Int!
  content: String!
}

input UpdateCommentInput {
  id: Int!
  content: String!
}

input CreateCategoryInput {
  name: String!
}

type Subscription {
  onCommentAdded(postId: Int!): Comment!
}